# Вторая часть - работа с исключениями
 
# Список основных исключений:
#    NameError: попытка использовать несуществующую переменную;
#    SyntaxError: ошибка разбора кода; 
#    TypeError: в функцию передано значение несовместимого типа; 
#    ValueError: в функцию передано значение совместимого типа, но с некорректным значением.
#    ZeroDivisionError: деление на 0;
#    AssertionError: генерируется командой accert при тестировании кода

print(":1:")
# Исключения поволяют перехватывать заведомо возможные ошибки при вполнении программы
try:
    print(7 / 0)
except:
    print("error")

print("\n:2:")
# Блок try может обрабатывать несколько исключений
try:
    print(7 / 0)
except ZeroDivisionError:
   print("Divided by zero")
except (ValueError, TypeError):
   print("Error occurred")

print("\n:3:")
# Отсутствие названия ошибки после except говорит о том,что будут пепехватываться любые ошибки
try:
    print(7 / 0)
except:
   print("runtime error")

print("\n:4:")
# finally говорит выполнить определенный код как в случае ошибки и ее перехвата,так и в случае отсутсвия ошибки
try:
    print(7 / 0)
except:
   print("runtime error")
finally:
    print("program is work")
try:
    print(7 / 2)
except:
   print("runtime error")
finally:
    print("program is work")

print("\n:5:")
# С помощью инструкции raise можно вызвать исключение, указав его тип
try:
    print(1)
    raise ValueError
    print(2)
except ValueError:
    print("ValueError")

print("\n:6:")
# Возможно вызвать исключение, указав его тип и параметр в качестве описания
try:
    raise NameError("Invalid name!")
except NameError:
    print("error name")

print("\n:7:")
# Возможно вызвать инструкцию raise без параметров, тогда повторно будет вызвано предыдущее исключение
try:
   #num = 5 / 0
   num = 5
except:
   print("An error occurred")
   raise
### Не совсем понятно, как отрабатывается этот код, если вместо 5 будет 5 / 0

print("\n:8:")
# Крманда accert проверяет правильность выражения на этапе тестирования; генерирует исключение - AssertionError
try:
    assert 2 + 2 == 4
    assert 1 + 1 == 3
except AssertionError:
    print("Error runtime")

print("\n:9:")
# В accert можно перелать второй параметр, который выполняется в случае ложности выражения
try:
    assert (1 + 1 == 3), "unkdown error"
except AssertionError:
    print("AssertionError")
