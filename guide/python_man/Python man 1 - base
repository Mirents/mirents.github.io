# Собран минимальный код в качестве напоминания
# Первая часть - базовые элементы языка
# Это комментарий

# Эквивалентные записи объявления строки; ковычки не влияют
str = 'String'
str = "String"

# Возможность присвоить переменной бое значение
str = 5
str = 'text'

print(":1:")
# Вывод текста
print("This is text")

print("\n:2:")
# Вывод числа
print(648)

print("\n:3:")
# Вывод переменной
print(str)

# Можно удалить значение любой переменной
del str

print("\n:4:")
# Операция со строкой '+'
print("first" + " string")

print("\n:5:")
# Операция со строкой '*'
print("first " * 3)

print("\n:6:")
# Приведение типов
print(int("5") + float("5"))
print("text to print: " + str(97))

print("\n:7:")
# Операции "на месте"; '+=', '-=', '*=', '/='
x = 6
x += 2
print(x)

# Список значений одного типа
arr = [1, 2, 3]
arr = ["a", "b", "c"]

# Список значений разных типов
arr = ["a", "b", 1, 2]

# Список значений со списком внутри
arr = ["a", "b", [1, 2, 3]]

print("\n:8:")
# Строка, как подвид списка
arr = "text"
print(arr[2])

print("\n:9:")
# Операции со списками
arr = [1, 2, 3]
print(arr + [4, 5, 6])
print(arr * 3)

print("\n:10:")
# Проверка наличия элемента в списке
print("b" in arr)

print("\n:11:")
# Добавление элемента в конец списка
arr.append("t")
print(arr)

print("\n:12:")
# Добавление элемента в указанную позицию
arr.insert(2, "p")
print(arr)

print("\n:13:")
# Количество элементов в списке
print(len(arr))

print("\n:14:")
# Первое упоминание элемента в списке или исключение
print(arr.index("p"))

print("\n:15:")
# Возвращает элемент списка с наибольшим значением
print(max([3, 5, 4]))

print("\n:16:")
# Возвращает элемент списка с наименьшим значением
print(min([3, 5, 4]))

print("\n:17:")
# Возвращает количество упоминаний элемента в списке
print(arr.count("p"))

print("\n:18:")
# Удаляет объект из списка
arr.remove("p")
print(arr)

print("\n:19:")
# Располагает элементы в обратном порядке
arr.reverse()
print(arr)

print("\n:20:")
# Функция создания списка элементов от 0 до указанного, при этом указанный не используется(преобразование list обязательно для использования списка)
num = list(range(10))
print(num)

print("\n:21:")
# С двумя параметрами будет создан диапазон в этих границах, за минусом последнего элемента
num = list(range(10, 20))
print(num)

print("\n:22:")
# С тремя параметрами - диапазон в границах с приращением третьим целым числом
num = list(range(10, 20, 2))
print(num)

# Булевы операторы and, or, not

# Операции сравнения ==, !=, <=, >=

print("\n:23:")
# Проверка условий
if 6 < 3:
    print("yes")
elif 6 == 3:
    print("no")
else:
    print("big")

print("\n:24:")
# Цикл while, break для остановки и continue для пропуска итерации
i = 1
while True:
    if (i % 2) == 0:
        print(i)
        #continue
    if i >= 20:
        break
    i += 1

print("\n:25:")
# Цикл for для списка значений
arr = ["one", "two", "three"]
for e in arr:
    print(e + " $")

print("\n:26:")
# Цикл for для целой последовательности чисел
for e in range(3):
    print(e * 10)

print("\n:27:")
# Объявление функции; до ее использования; все переменные локальны
def sum_int(x, y):
    print(x + y)
sum_int(3, 5)

print("\n:28:")
# Возврат значения из функции; после return функция не выполняется
def sum_int(x, y):
    return(x + y)
print(sum_int(4, 7))

print("\n:29:")
# Вызов функции через назначенную переменную
def sum_int(x, y):
    return(x + y)
operation = sum_int
print(operation(4, 8))

print("\n:30:")
# Функции как объекты в качестве параметров других функций
def sum_int(x, y):
    return(x + y)
def mn_sum(func, x, y):
    return (func(x, y) * func(x, y))
print(mn_sum(sum_int, 4, 8))

# Подключение модуля; пишется в начале программы
import random

# Второй способ, подключение определенной функции или константы
from math import pi

# Так же возможно импортировать, используя другое имя; действует для констант и функций
from math import pi as number_pi

# Ввод числа
#user_input = input("enter here: \n")
#print(int(user_input) * 3)
