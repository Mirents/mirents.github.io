# Краткий сборник полезных напоминаний,связанных с

print(":1:")
# Объект None используется для обозначения пустых переменных
if None == None:
    print(None)

print("\n:2:")
# Функция, которая явно не возвращает значение, возвращает объект None
def printsum(a, b):
    c = a + b
sum = printsum(3, 4)
print(sum)

print("\n:3:")
# Словарь, ключами которого не может быть список
dict = {} # Пустой словарь
dict = {
    1: [123, 456, 789],
    'ast': [123, 'Tiy', 369],
    5: ['From', 13, 65],
}
print(dict['ast'])
dict = {'Red': 76, 'Green': 31, 'Yellow': 4, 'Black': 13}
print(dict['Red'])

print("\n:4:")
# Выбор несуществующего элемента с обработкой исключения
try:
    el = "Pink"
    print(dict[el])
except KeyError:
    print("Element " + el + " is not")

print("\n:5:")
# Работа с элементами словаря
dict = {1: "a", 2: "b", 3: "c"}
dict[2] = "x" # Изменение элемента
dict[7] = 98 # Добавление нового элемента
print(dict)

print("\n:6:")
# Как и со списками, проверка наличия или отсутствия ключа в словаре
dict = {1: "a", 2: "b", 3: "c"}
print(1 in dict)
print(4 in dict)
print(4 not in dict)

print("\n:7:")
# Использование метода get для получения элемента словаря
dict = {
    "red": 666,
    "blue": "faradenza",
    361: "color"}
    # None: "This is not" Разобоаться с работой возвращаемого элемента None
print(dict[361])        # Стандартный выюор элемента
print(dict.get(361))    # Выбор с помощью метода get, аналогичен предыдущему
print(dict.get("yellow"))    # Т.к. данного элемента нет в словаре, будет возвращено значение для ключа None
print(dict.get("yellow", "Text"))    # Т.к. данного элемента нет в словаре, будет возвращен второй параметр метода get

print("\n:8:")
# Котрежи похожи на списки, но являются неизменяемыми. Ниже указаны две одинаковые записи кортежей, со скобками и без
abc = ("a", "b", "c", "d")
abc = "a", "b", "c", "d"
# Обращаться к элементам так же по номеру элемента:
print(abc[2])
# Можно сделать пустой кортеж
abc = ()
# Или кортеж в кортеже
abc = ("a", "b", (1, 2, 3))

print("\n:9:")
# Срезы получаются индексированием списка в виде двух значений из спискоа или кортежей; в расчет берется индекс элемента, как в массиве с 0, а не порядковый номер; номер последнегоо включения как и с пепечислениями -1 элемент
abc = [3, 9, 1, 4, 7, 6, 2]
print(abc[2:5]) # Будет выведено: 1, 4, 7
print(abc[3:7]) # Будет выведкно:4, 7, 6, 2

# Еали опущен первый элемент - срез берется с начала, если последний, то до конца
print(abc[:5])
print(abc[2:])


# Третий параметр указывает шаг, его можно использовать вообще отдельно
print(abc[2:5:2])
print(abc[::2])

# Можно использовать отрийательные значения, програмса будет считать в обратном направлении
print(abc[5:2:-1])

print("\n:10:")
# Саисковое включение позволяет создавать список, подчиняющийся опредкленному математическому условию
cubes = [i**3 for i in range(5)]
print(cubes)

# Можно использовать условие
evens=[i**2 for i in range(10) if i**2 % 2 == 0]
print(evens)

print("\n:11:")
# Форматирование строк позволяет выводить значения без приведения типов
abc = [3, 4, 9]
msg = "Numbers: {0}, {1}, {2}".format(abc[0], abc[1], abc[2])
print(msg)
# Можно использовать другую запись с именами переменных
msg = "Is {a} dont {b}".format(a=3, b=6)
print(msg)
